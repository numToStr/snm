name: CI-CD

on:
    push:
        # branches:
        #     - master
        tags:
            - "*"

env:
    CARGO_TERM_COLOR: always
    PROJECT_NAME: snm
    PROJECT_DESC: "Smol Node Manager written in Rust"
    AUTHOR: numToStr
    EMAIL: sudo@vikasraj.dev

jobs:
    build:
        name: Release
        strategy:
            matrix:
                job:
                    - {
                          os: ubuntu-latest,
                          target: aarch64-unknown-linux-gnu,
                          use_cross: true,
                      }
                    - {
                          os: ubuntu-latest,
                          target: armv7-unknown-linux-gnueabihf,
                          use_cross: true,
                      }
                    - {
                          os: ubuntu-latest,
                          target: x86_64-unknown-linux-gnu,
                          use_cross: false,
                      }
                    - {
                          os: windows-latest,
                          target: x86_64-pc-windows-msvc,
                          use_cross: false,
                      }
                    - {
                          os: macos-latest,
                          target: x86_64-apple-darwin,
                          use_cross: false,
                      }
        runs-on: ${{ matrix.job.os }}
        timeout-minutes: 20
        steps:
            - name: Git Checkout
              uses: actions/checkout@v2

            - name: Initialize workflow variables
              id: vars
              shell: bash
              run: |
                  # parse commit reference info
                  REF_NAME=${GITHUB_REF#refs/*/}
                  unset REF_BRANCH ; case ${GITHUB_REF} in refs/heads/*) REF_BRANCH=${GITHUB_REF#refs/heads/} ;; esac;
                  unset REF_TAG ; case ${GITHUB_REF} in refs/tags/*) REF_TAG=${GITHUB_REF#refs/tags/} ;; esac;
                  REF_SHAS=${GITHUB_SHA:0:8}
                  echo set-output name=REF_NAME::${REF_NAME}
                  echo set-output name=REF_BRANCH::${REF_BRANCH}
                  echo set-output name=REF_TAG::${REF_TAG}
                  echo set-output name=REF_SHAS::${REF_SHAS}
                  echo ::set-output name=REF_NAME::${REF_NAME}
                  echo ::set-output name=REF_BRANCH::${REF_BRANCH}
                  echo ::set-output name=REF_TAG::${REF_TAG}
                  echo ::set-output name=REF_SHAS::${REF_SHAS}
                  # staging directory
                  STAGING='_staging'
                  echo set-output name=STAGING::${STAGING}
                  echo ::set-output name=STAGING::${STAGING}
                  # Determine EXE suffix
                  EXE_suffix="" ;
                  case ${{ matrix.job.target }} in *-pc-windows-*) EXE_suffix=".exe" ;; esac;
                  echo set-output name=EXE_suffix::${EXE_suffix}
                  echo ::set-output name=EXE_suffix::${EXE_suffix}
                  # package name
                  CONTENT_TYPE="x-tar"
                  PKG_suffix=".tar.gz" ;
                  case ${{ matrix.job.target }} in
                    *-pc-windows-*)
                      CONTENT_TYPE="zip"
                      PKG_suffix=".zip"
                    ;;
                  esac;
                  PKG_BASENAME=${PROJECT_NAME}-${{ matrix.job.target }}
                  PKG_NAME=${PKG_BASENAME}${PKG_suffix}
                  echo set-output name=CONTENT_TYPE::${CONTENT_TYPE}
                  echo set-output name=PKG_suffix::${PKG_suffix}
                  echo set-output name=PKG_BASENAME::${PKG_BASENAME}
                  echo set-output name=PKG_NAME::${PKG_NAME}
                  echo ::set-output name=CONTENT_TYPE::${CONTENT_TYPE}
                  echo ::set-output name=PKG_suffix::${PKG_suffix}
                  echo ::set-output name=PKG_BASENAME::${PKG_BASENAME}
                  echo ::set-output name=PKG_NAME::${PKG_NAME}

            - name: Create all needed build/work directories
              shell: bash
              run: |
                  mkdir -p '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}'

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: ${{ matrix.job.target }}
                  override: true
                  profile: minimal

            - name: Build
              uses: actions-rs/cargo@v1
              with:
                  use-cross: ${{ matrix.job.use_cross }}
                  command: build
                  args: --release --target=${{ matrix.job.target }}

            - name: Package
              shell: bash
              id: package
              run: |
                  ARCHIVE_DIR='${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/'
                  # Binary
                  cp 'target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}' "$ARCHIVE_DIR"
                  # base compressed package
                  pushd '${{ steps.vars.outputs.STAGING }}/' >/dev/null
                  case ${{ matrix.job.target }} in
                    *-pc-windows-*) 7z -y a '${{ steps.vars.outputs.PKG_NAME }}' '${{ steps.vars.outputs.PKG_BASENAME }}'/* | tail -2 ;;
                    *) tar czf '${{ steps.vars.outputs.PKG_NAME }}' '${{ steps.vars.outputs.PKG_BASENAME }}'/* ;;
                  esac;
                  popd >/dev/null

            - name: Publish archives and packages
              uses: softprops/action-gh-release@v1
              with:
                  files: ${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_NAME }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    publish_rust_crate:
        name: Publish Rust Crate on crates.io
        runs-on: ubuntu-latest
        timeout-minutes: 20
        needs: build
        steps:
            - uses: actions/checkout@v2

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true
                  profile: minimal

            - name: Publish
              uses: actions-rs/cargo@v1
              with:
                  command: publish
                  args: --allow-dirty --verbose --token ${{ secrets.CARGO_TOKEN }}

    publish_aur_package:
        name: Publish AUR package
        runs-on: ubuntu-latest
        timeout-minutes: 20
        needs: build
        steps:
            - uses: actions/checkout@v2

            - name: Generate PKGBUILD
              id: gen_pkgbuild
              shell: bash
              run: |
                  URL=$(git remote get-url origin)
                  echo URL::${URL}
                  VERSION=$(git describe --abbrev=0 --tags | sed -e "s/v//g")
                  echo set-output name=VERSION::${VERSION}
                  echo ::set-output name=VERSION::"${VERSION}"
                  sed -i -e "s%{{AUTHOR}}%${AUTHOR}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{EMAIL}}%${EMAIL}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{NAME}}%${PROJECT_NAME}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{DESC}}%${PROJECT_DESC}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{VERSION}}%${VERSION}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{URL}}%${URL}%g;" ./.aur/PKGBUILD
                  cat ./.aur/PKGBUILD

            - name: Publish to the AUR
              uses: KSXGitHub/github-actions-deploy-aur@v2
              with:
                  pkgname: ${{ env.PROJECT_NAME }}
                  pkgbuild: ./.aur/PKGBUILD
                  commit_username: ${{ env.AUTHOR }}
                  commit_email: ${{ env.EMAIL }}
                  commit_message: ${{ steps.gen_pkgbuild.outputs.VERSION }}
                  ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

# SOURCE: https://github.com/sharkdp/fd/blob/master/.github/workflows/CICD.yml
name: build

env:
    CARGO_TERM_COLOR: always
    MSRV: 1.54.0
    CICD_INTERMEDIATES_DIR: "_cicd-intermediates"

on:
    pull_request:
        paths-ignore:
            - "scripts/**"
            - "LICENSE"
            - "Makefile"
            - "README.md"
            - "CHANGELOG.md"
        branches:
            - master
    push:
        tags:
            - "*"

jobs:
    build:
        name: Release
        strategy:
            matrix:
                job:
                    - {
                          os: ubuntu-latest,
                          target: aarch64-unknown-linux-gnu,
                          use_cross: true,
                      }
                    - {
                          os: ubuntu-latest,
                          target: armv7-unknown-linux-gnueabihf,
                          use_cross: true,
                      }
                    - {
                          os: ubuntu-latest,
                          target: x86_64-unknown-linux-gnu,
                          use_cross: false,
                      }
                    - {
                          os: windows-latest,
                          target: x86_64-pc-windows-msvc,
                          use_cross: false,
                      }
                    - {
                          os: macos-latest,
                          target: x86_64-apple-darwin,
                          use_cross: false,
                      }
        runs-on: ${{ matrix.job.os }}
        timeout-minutes: 20
        steps:
            - name: "Git Checkout"
              uses: actions/checkout@v2

            - name: "Extract crate information"
              shell: bash
              run: |
                REF_TAG=v$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)
                case ${GITHUB_REF} in
                  refs/tags/*) REF_TAG=${GITHUB_REF#refs/tags/} ;;
                esac;

                echo "PROJECT_VERSION=${REF_TAG}" >> $GITHUB_ENV
                echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
                echo "PROJECT_DESC=$(sed -n 's/^description = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
                echo "PROJECT_MAINTAINERS=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> $GITHUB_ENV
                echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

            - name: "Install Rust toolchain - (${{ env.MSRV }})"
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: ${{ env.MSRV }}
                  target: ${{ matrix.job.target }}
                  override: true
                  profile: minimal
                  components: clippy

            - name: "Clippy"
              uses: actions-rs/cargo@v1
              with:
                command: clippy
                args: --all-targets --all-features

            - name: "Test"
              uses: actions-rs/cargo@v1
              with:
                  use-cross: ${{ matrix.job.use_cross }}
                  command: test
                  args: --target=${{ matrix.job.target }}

            - name: "Build"
              uses: actions-rs/cargo@v1
              with:
                  use-cross: ${{ matrix.job.use_cross }}
                  command: build
                  args: --release --target=${{ matrix.job.target }}

            - name: "Package"
              shell: bash
              id: package
              run: |
                  # Build binary details
                  EXE_SUFFIX=""
                  case ${{ matrix.job.target }} in
                    *-pc-windows-*) EXE_SUFFIX=".exe" ;;
                  esac;
                  BIN_NAME="${{ env.PROJECT_NAME }}${EXE_SUFFIX}"
                  BIN_PATH="target/${{ matrix.job.target }}/release/${BIN_NAME}"

                  # Tarball details
                  PKG_SUFFIX=".tar.gz" ; case ${{ matrix.job.target }} in *-pc-windows-*) PKG_SUFFIX=".zip" ;; esac;
                  PKG_BASENAME="${{ env.PROJECT_NAME}}-${{ env.PROJECT_VERSION }}-${{ matrix.job.target }}"
                  PKG_NAME="${PKG_BASENAME}${PKG_SUFFIX}"
                  echo ::set-output name=PKG_NAME::${PKG_NAME}

                  PKG_STAGING="${{ env.CICD_INTERMEDIATES_DIR }}/package"
                  ARCHIVE_DIR="${PKG_STAGING}/${PKG_BASENAME}/"
                  mkdir -p "${ARCHIVE_DIR}"

                  # Binary
                  cp "${BIN_PATH}" "${ARCHIVE_DIR}"

                  # base compressed package
                  pushd "${PKG_STAGING}/" >/dev/null
                  case ${{ matrix.job.target }} in
                    *-pc-windows-*) 7z -y a "${PKG_NAME}" "${PKG_BASENAME}"/* | tail -2 ;;
                    *) tar czf "${PKG_NAME}" "${PKG_BASENAME}"/* ;;
                  esac;
                  popd >/dev/null

                  # Let subsequent steps know where to find the compressed package
                  echo ::set-output name=PKG_PATH::"${PKG_STAGING}/${PKG_NAME}"

            - name: "Artifact upload"
              uses: actions/upload-artifact@master
              with:
                name: ${{ steps.package.outputs.PKG_NAME }}
                path: ${{ steps.package.outputs.PKG_PATH }}

            - name: "Check for release"
              id: is-release
              shell: bash
              run: |
                # Find out whether the action is triggered by a release tag or not
                unset IS_RELEASE ; if [[ $GITHUB_REF =~ ^refs/tags/v[0-9].* ]]; then IS_RELEASE='true' ; fi
                echo ::set-output name=IS_RELEASE::${IS_RELEASE}

            - name: "Publish archives and packages"
              uses: softprops/action-gh-release@v1
              if: steps.is-release.outputs.IS_RELEASE
              with:
                files: |
                  ${{ steps.package.outputs.PKG_PATH }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    publish_rust_crate:
        name: "Publish Rust Crate on crates.io"
        if: startsWith(github.ref, 'refs/tags/v')
        runs-on: ubuntu-latest
        timeout-minutes: 20
        needs: build
        steps:
            - uses: actions/checkout@v2

            - name: "Install Rust toolchain"
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true
                  profile: minimal

            - name: "Publish"
              uses: actions-rs/cargo@v1
              with:
                  command: publish
                  args: --verbose --token ${{ secrets.CARGO_TOKEN }}

    publish_aur_package:
        name: "Publish AUR package"
        if: startsWith(github.ref, 'refs/tags/v')
        runs-on: ubuntu-latest
        timeout-minutes: 20
        needs: build
        env:
          AUTHOR: numToStr
          EMAIL: sudo@vikasraj.dev
        steps:
            - uses: actions/checkout@v2

            - name: "Generate PKGBUILD"
              id: gen_pkgbuild
              shell: bash
              run: |
                  sed -i -e "s%{{AUTHOR}}%${{ env.AUTHOR }}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{EMAIL}}%${{ env.EMAIL }}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{NAME}}%${{ env.PROJECT_NAME }}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{DESC}}%${{ env.PROJECT_DESC }}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{VERSION}}%${{ env.PROJECT_VERSION }}%g;" ./.aur/PKGBUILD
                  sed -i -e "s%{{URL}}%${{ env.PROJECT_HOMEPAGE }}%g;" ./.aur/PKGBUILD
                  cat ./.aur/PKGBUILD

            - name: "Publish to AUR"
              uses: KSXGitHub/github-actions-deploy-aur@v2
              with:
                  pkgname: ${{ env.PROJECT_NAME }}
                  pkgbuild: ./.aur/PKGBUILD
                  commit_username: ${{ env.AUTHOR }}
                  commit_email: ${{ env.EMAIL }}
                  commit_message: ${{ env.PROJECT_VERSION }}
                  ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
